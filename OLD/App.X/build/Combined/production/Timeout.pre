
# 1 "Timeout.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.43\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.43\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Program Files (x86)\Microchip\xc8\v1.43\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "C:\Program Files (x86)\Microchip\xc8\v1.43\include\errno.h"
extern int errno;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.43\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Program Files (x86)\Microchip\xc8\v1.43\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.43\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 14 "C:\Program Files (x86)\Microchip\xc8\v1.43\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 36
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 11 "Timeout.h"
typedef struct TIMEOUT_STRUCT
{
uint8_t enabled;
uint16_t timeout_ms;
uint16_t periodic;
void(*callback)(void);
void *arg;
} TIMEOUT_t;

typedef enum TIMEOUT_HANDLE
{
MCU_LED_TIMEOUT = 0x00,
BLUETOOTH_LED_TIMEOUT,
TEN_HZ_LOG_TIMEOUT,
TWENTY_HZ_LOG_TIMEOUT
} TIMEOUT_HANDLE_t;


void InitTimer(void);
void AddTimer(TIMEOUT_HANDLE_t handle, uint8_t enabled, uint16_t timeout_ms, uint16_t periodic, void(*callback)(void), void *arg);
void SetTimerStatus(TIMEOUT_HANDLE_t handle, uint8_t enabled);
void SetTimerPeriodic(TIMEOUT_HANDLE_t handle, uint16_t periodic);
void ServiceTimers(void);


extern uint16_t _timer_tick;

# 13 "NonVolatileMemory.h"
typedef enum DISPLAY_TYPE_ENUM {
NONE,
LOG,
DISPLAY
}PID_CHANNEL_DISPLAY_t;

typedef struct PID_CHANNEL_CONFIG_STRUCT
{
uint8_t ID;
PID_CHANNEL_DISPLAY_t display_type;
uint8_t PID_val;
uint8_t raw_result;
uint8_t conv_result;
uint8_t poll_rate;
uint16_t next_poll;
} PID_CHANNEL_CONFIG_t;

typedef struct DEVICE_CONFIG_STRUCT
{
uint8_t temp1;
uint8_t temp2;
uint8_t temp3;
} DEVICE_CONFIG_t;


void InitDeviceConfig(void);


extern PID_CHANNEL_CONFIG_t PID_CHANNEL_CONFIG[20];
extern DEVICE_CONFIG_t DEVICE_CONFIG;

# 8 "LED_UI.h"
typedef struct STATUS_LED {
uint16_t LED_STATE;
TIMEOUT_HANDLE_t TIMEOUT_HANDLE;
} STATUS_LED_t;

enum LED_STATE_enum {
LED_ON = 0x00,
LED_OFF = 0x03E8,
LED_FAST_FLASH = 0x00FA,
LED_SLOW_FLASH = 0x01FA
};


void InitLED_UI(void);
static void UpdateMCU_LED(void);
static void UpdateBluetooth_LED(void);
void SetLED_State(STATUS_LED_t, uint16_t);


extern STATUS_LED_t MCU_LED;
extern STATUS_LED_t BLUETOOTH_LED;

# 13 "Timeout.c"
TIMEOUT_t DEVICE_TIMEOUTS[4];
uint16_t _timer_tick = 0;

# 24
void InitTimer(void)
{
memset(DEVICE_TIMEOUTS, 0, sizeof(TIMEOUT_t));

}

# 37
void AddTimer(TIMEOUT_HANDLE_t handle, uint8_t enabled, uint16_t timeout_ms, uint16_t periodic, void(*callback)(void), void *arg)
{
DEVICE_TIMEOUTS[handle].enabled = enabled;
DEVICE_TIMEOUTS[handle].timeout_ms = timeout_ms;
DEVICE_TIMEOUTS[handle].periodic = periodic;
DEVICE_TIMEOUTS[handle].callback = callback;
(void)arg;
}

# 53
void SetTimerStatus(TIMEOUT_HANDLE_t handle, uint8_t enabled)
{
DEVICE_TIMEOUTS[handle].enabled = enabled;
}

# 65
void SetTimerPeriodic(TIMEOUT_HANDLE_t handle, uint16_t periodic)
{
DEVICE_TIMEOUTS[handle].periodic = periodic;
}

# 77
void ServiceTimers(void)
{
TIMEOUT_HANDLE_t handle = 0;

for(handle=0;handle<4;handle++)
{
if((0x01 == DEVICE_TIMEOUTS[handle].enabled) && (DEVICE_TIMEOUTS[handle].timeout_ms < _timer_tick))
{
DEVICE_TIMEOUTS[handle].callback();
}

if(DEVICE_TIMEOUTS[handle].periodic > 0)
{
DEVICE_TIMEOUTS[handle].timeout_ms += DEVICE_TIMEOUTS[handle].periodic;
}
else
{
SetTimerStatus(handle, 0x00);
}
}
}
