Version 3.2 HI-TECH Software Intermediate Code
[v F180 `(v ~T0 @X0 0 tf ]
"11 Timeout.h
[s S2 `uc 1 `ui 1 `ui 1 `*F180 1 `*v 1 ]
[n S2 TIMEOUT_STRUCT enabled timeout_ms periodic callback arg ]
"16 C:\Program Files (x86)\Microchip\xc8\v1.43\include\string.h
[v _memset `(*v ~T0 @X0 0 ef3`*v`i`ui ]
"38 Timeout.c
[c E184 0 1 2 3 .. ]
[n E184 TIMEOUT_HANDLE MCU_LED_TIMEOUT BLUETOOTH_LED_TIMEOUT TEN_HZ_LOG_TIMEOUT TWENTY_HZ_LOG_TIMEOUT  ]
[v F198 `(v ~T0 @X0 0 tf ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;Timeout.h: 11: typedef struct TIMEOUT_STRUCT
[; ;Timeout.h: 12: {
[; ;Timeout.h: 13: uint8_t enabled;
[; ;Timeout.h: 14: uint16_t timeout_ms;
[; ;Timeout.h: 15: uint16_t periodic;
[; ;Timeout.h: 16: void(*callback)(void);
[; ;Timeout.h: 17: void *arg;
[; ;Timeout.h: 18: } TIMEOUT_t;
[; ;Timeout.h: 20: typedef enum TIMEOUT_HANDLE
[; ;Timeout.h: 21: {
[; ;Timeout.h: 22: MCU_LED_TIMEOUT = 0x00,
[; ;Timeout.h: 23: BLUETOOTH_LED_TIMEOUT,
[; ;Timeout.h: 24: TEN_HZ_LOG_TIMEOUT,
[; ;Timeout.h: 25: TWENTY_HZ_LOG_TIMEOUT
[; ;Timeout.h: 26: } TIMEOUT_HANDLE_t;
[; ;Timeout.h: 29: void InitTimer(void);
[; ;Timeout.h: 30: void AddTimer(TIMEOUT_HANDLE_t handle, uint8_t enabled, uint16_t timeout_ms, uint16_t periodic, void(*callback)(void), void *arg);
[; ;Timeout.h: 31: void SetTimerStatus(TIMEOUT_HANDLE_t handle, uint8_t enabled);
[; ;Timeout.h: 32: void SetTimerPeriodic(TIMEOUT_HANDLE_t handle, uint16_t periodic);
[; ;Timeout.h: 33: void ServiceTimers(void);
[; ;Timeout.h: 36: extern uint16_t _timer_tick;
[; ;NonVolatileMemory.h: 13: typedef enum DISPLAY_TYPE_ENUM {
[; ;NonVolatileMemory.h: 14: NONE,
[; ;NonVolatileMemory.h: 15: LOG,
[; ;NonVolatileMemory.h: 16: DISPLAY
[; ;NonVolatileMemory.h: 17: }PID_CHANNEL_DISPLAY_t;
[; ;NonVolatileMemory.h: 19: typedef struct PID_CHANNEL_CONFIG_STRUCT
[; ;NonVolatileMemory.h: 20: {
[; ;NonVolatileMemory.h: 21: uint8_t ID;
[; ;NonVolatileMemory.h: 22: PID_CHANNEL_DISPLAY_t display_type;
[; ;NonVolatileMemory.h: 23: uint8_t PID_val;
[; ;NonVolatileMemory.h: 24: uint8_t raw_result;
[; ;NonVolatileMemory.h: 25: uint8_t conv_result;
[; ;NonVolatileMemory.h: 26: uint8_t poll_rate;
[; ;NonVolatileMemory.h: 27: uint16_t next_poll;
[; ;NonVolatileMemory.h: 28: } PID_CHANNEL_CONFIG_t;
[; ;NonVolatileMemory.h: 30: typedef struct DEVICE_CONFIG_STRUCT
[; ;NonVolatileMemory.h: 31: {
[; ;NonVolatileMemory.h: 32: uint8_t temp1;
[; ;NonVolatileMemory.h: 33: uint8_t temp2;
[; ;NonVolatileMemory.h: 34: uint8_t temp3;
[; ;NonVolatileMemory.h: 35: } DEVICE_CONFIG_t;
[; ;NonVolatileMemory.h: 38: void InitDeviceConfig(void);
[; ;NonVolatileMemory.h: 41: extern PID_CHANNEL_CONFIG_t PID_CHANNEL_CONFIG[20];
[; ;NonVolatileMemory.h: 42: extern DEVICE_CONFIG_t DEVICE_CONFIG;
[; ;LED_UI.h: 8: typedef struct STATUS_LED {
[; ;LED_UI.h: 9: uint16_t LED_STATE;
[; ;LED_UI.h: 10: TIMEOUT_HANDLE_t TIMEOUT_HANDLE;
[; ;LED_UI.h: 11: } STATUS_LED_t;
[; ;LED_UI.h: 13: enum LED_STATE_enum {
[; ;LED_UI.h: 14: LED_ON = 0x00,
[; ;LED_UI.h: 15: LED_OFF = 0x03E8,
[; ;LED_UI.h: 16: LED_FAST_FLASH = 0x00FA,
[; ;LED_UI.h: 17: LED_SLOW_FLASH = 0x01FA
[; ;LED_UI.h: 18: };
[; ;LED_UI.h: 21: void InitLED_UI(void);
[; ;LED_UI.h: 22: static void UpdateMCU_LED(void);
[; ;LED_UI.h: 23: static void UpdateBluetooth_LED(void);
[; ;LED_UI.h: 24: void SetLED_State(STATUS_LED_t, uint16_t);
[; ;LED_UI.h: 27: extern STATUS_LED_t MCU_LED;
[; ;LED_UI.h: 28: extern STATUS_LED_t BLUETOOTH_LED;
"13 Timeout.c
[v _DEVICE_TIMEOUTS `S2 ~T0 @X0 -> 4 `i e ]
[; ;Timeout.c: 13: TIMEOUT_t DEVICE_TIMEOUTS[4];
"14
[v __timer_tick `ui ~T0 @X0 1 e ]
[i __timer_tick
-> -> 0 `i `ui
]
[; ;Timeout.c: 14: uint16_t _timer_tick = 0;
"24
[v _InitTimer `(v ~T0 @X0 1 ef ]
"25
{
[; ;Timeout.c: 24: void InitTimer(void)
[; ;Timeout.c: 25: {
[e :U _InitTimer ]
[f ]
[; ;Timeout.c: 26: memset(DEVICE_TIMEOUTS, 0, sizeof(TIMEOUT_t));
"26
[e ( _memset (3 , , -> &U _DEVICE_TIMEOUTS `*v -> 0 `i -> # `S2 `ui ]
[; ;Timeout.c: 28: }
"28
[e :UE 6 ]
}
"37
[v _AddTimer `(v ~T0 @X0 1 ef6`E184`uc`ui`ui`*F198`*v ]
"38
{
[; ;Timeout.c: 37: void AddTimer(TIMEOUT_HANDLE_t handle, uint8_t enabled, uint16_t timeout_ms, uint16_t periodic, void(*callback)(void), void *arg)
[; ;Timeout.c: 38: {
[e :U _AddTimer ]
"37
[v _handle `E184 ~T0 @X0 1 r1 ]
[v _enabled `uc ~T0 @X0 1 r2 ]
[v _timeout_ms `ui ~T0 @X0 1 r3 ]
[v _periodic `ui ~T0 @X0 1 r4 ]
[v F261 `(v ~T0 @X0 0 tf ]
[v _callback `*F261 ~T0 @X0 1 r5 ]
[v _arg `*v ~T0 @X0 1 r6 ]
"38
[f ]
[; ;Timeout.c: 39: DEVICE_TIMEOUTS[handle].enabled = enabled;
"39
[e = . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 0 _enabled ]
[; ;Timeout.c: 40: DEVICE_TIMEOUTS[handle].timeout_ms = timeout_ms;
"40
[e = . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 1 _timeout_ms ]
[; ;Timeout.c: 41: DEVICE_TIMEOUTS[handle].periodic = periodic;
"41
[e = . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 2 _periodic ]
[; ;Timeout.c: 42: DEVICE_TIMEOUTS[handle].callback = callback;
"42
[e = . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 3 _callback ]
[; ;Timeout.c: 43: (void)arg;
"43
[e _arg ]
[; ;Timeout.c: 44: }
"44
[e :UE 7 ]
}
"53
[v _SetTimerStatus `(v ~T0 @X0 1 ef2`E184`uc ]
"54
{
[; ;Timeout.c: 53: void SetTimerStatus(TIMEOUT_HANDLE_t handle, uint8_t enabled)
[; ;Timeout.c: 54: {
[e :U _SetTimerStatus ]
"53
[v _handle `E184 ~T0 @X0 1 r1 ]
[v _enabled `uc ~T0 @X0 1 r2 ]
"54
[f ]
[; ;Timeout.c: 55: DEVICE_TIMEOUTS[handle].enabled = enabled;
"55
[e = . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 0 _enabled ]
[; ;Timeout.c: 56: }
"56
[e :UE 8 ]
}
"65
[v _SetTimerPeriodic `(v ~T0 @X0 1 ef2`E184`ui ]
"66
{
[; ;Timeout.c: 65: void SetTimerPeriodic(TIMEOUT_HANDLE_t handle, uint16_t periodic)
[; ;Timeout.c: 66: {
[e :U _SetTimerPeriodic ]
"65
[v _handle `E184 ~T0 @X0 1 r1 ]
[v _periodic `ui ~T0 @X0 1 r2 ]
"66
[f ]
[; ;Timeout.c: 67: DEVICE_TIMEOUTS[handle].periodic = periodic;
"67
[e = . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 2 _periodic ]
[; ;Timeout.c: 68: }
"68
[e :UE 9 ]
}
"77
[v _ServiceTimers `(v ~T0 @X0 1 ef ]
"78
{
[; ;Timeout.c: 77: void ServiceTimers(void)
[; ;Timeout.c: 78: {
[e :U _ServiceTimers ]
[f ]
"79
[v _handle `E184 ~T0 @X0 1 a ]
[; ;Timeout.c: 79: TIMEOUT_HANDLE_t handle = 0;
[e = _handle -> -> 0 `i `E184 ]
[; ;Timeout.c: 81: for(handle=0;handle<4;handle++)
"81
{
[e = _handle -> -> 0 `i `E184 ]
[e $ < -> _handle `i -> 4 `i 11  ]
[e $U 12  ]
"82
[e :U 11 ]
[; ;Timeout.c: 82: {
{
[; ;Timeout.c: 83: if((0x01 == DEVICE_TIMEOUTS[handle].enabled) && (DEVICE_TIMEOUTS[handle].timeout_ms < _timer_tick))
"83
[e $ ! && == -> 1 `i -> . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 0 `i < . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 1 __timer_tick 14  ]
[; ;Timeout.c: 84: {
"84
{
[; ;Timeout.c: 85: DEVICE_TIMEOUTS[handle].callback();
"85
[e ( *U . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 3 ..  ]
"86
}
[e :U 14 ]
[; ;Timeout.c: 86: }
[; ;Timeout.c: 88: if(DEVICE_TIMEOUTS[handle].periodic > 0)
"88
[e $ ! > . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 2 -> -> 0 `i `ui 15  ]
[; ;Timeout.c: 89: {
"89
{
[; ;Timeout.c: 90: DEVICE_TIMEOUTS[handle].timeout_ms += DEVICE_TIMEOUTS[handle].periodic;
"90
[e =+ . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 1 . *U + &U _DEVICE_TIMEOUTS * -> _handle `ux -> -> # *U &U _DEVICE_TIMEOUTS `ui `ux 2 ]
"91
}
[; ;Timeout.c: 91: }
[e $U 16  ]
"92
[e :U 15 ]
[; ;Timeout.c: 92: else
[; ;Timeout.c: 93: {
"93
{
[; ;Timeout.c: 94: SetTimerStatus(handle, 0x00);
"94
[e ( _SetTimerStatus (2 , _handle -> -> 0 `i `uc ]
"95
}
[e :U 16 ]
"96
}
"81
[e ++ _handle -> -> 1 `i `E184 ]
[e $ < -> _handle `i -> 4 `i 11  ]
[e :U 12 ]
"96
}
[; ;Timeout.c: 95: }
[; ;Timeout.c: 96: }
[; ;Timeout.c: 97: }
"97
[e :UE 10 ]
}
